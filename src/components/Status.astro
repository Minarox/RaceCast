<div id="status">
    <p>Connexion en cours...</p>
    <button type="button">Se reconnecter</button>
</div>

<script>
    import { State } from "../types/state.ts";

    // Fetch DOM elements
    const div: HTMLElement = document.getElementById("status") as HTMLElement;
    const p: HTMLElement = div.querySelector("p") as HTMLElement;
    const button: HTMLButtonElement = div.querySelector("button") as HTMLButtonElement;

    // Event listener for status change
    document.addEventListener("status", (event: any): void => {
        switch (event.detail) {
            case State.CONNECTING:
            case State.RECONNECTING:
                button.style.display = "none";
                p.innerText = `${event.detail === State.CONNECTING ? "Connexion" : "Reconnexion"} en cours...`;
                div.classList.remove("hidden");
                div.style.animation = "pulse-orange 2s linear infinite alternate";
                break;

            case State.CONNECTED:
                button.style.display = "none";
                p.innerText = "Connecté";
                div.classList.remove("hidden");
                div.style.animation = "pulse-green 3s linear alternate forwards";
                setTimeout((): void => div.classList.add("hidden"), 2700);
                break;

            case State.DISCONNECTED:
                p.innerText = "Déconnecté";
                div.classList.remove("hidden");
                div.style.animation = "pulse-red 2s linear infinite alternate";
                button.style.display = "block";
                break;
        }
    });

    // Button click event for reconnection
    button.addEventListener("click", (event: any): void => {
        if (event.target === button) {
            document.dispatchEvent(new CustomEvent("reconnect"));
        }
    });
</script>

<style>
    div {
        z-index: 1000;
        background-color: #f0f0f0;
        border-radius: 6px;
        position: absolute;
        top: 1rem;
        left: 50%;
        transform: translateX(-50%);
        font-size: 1.2em;
        display: flex;
        flex-flow: column nowrap;
        justify-content: center;
        align-items: center;
        gap: 0.5rem;
        font-weight: bold;
        text-align: center;
        padding: 0.7rem 1.8rem;
        transition: opacity 0.5s ease-in-out, top 0.5s ease-in-out, box-shadow 0.3s ease-in-out;

        > button {
            display: none;
            padding: 0.5rem 1.2rem;
            backdrop-filter: blur(4px);
            background-color: rgba(36, 36, 36, 0.9);
            color: #fff;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
            outline: none;
            border: none;
            width: max-content;

            &:hover {
                background-color: rgba(36, 36, 36, 1);
            }
        }
    }

    .hidden {
        opacity: 0;
        top: -100px;
    }

    @keyframes pulse-green {
        from {
            box-shadow: inset 0 0 0 3px green;
        }
        to {
            box-shadow: inset 0 0 14px 3px green;
        }
    }

    @keyframes pulse-orange {
        from {
            box-shadow: inset 0 0 0 3px orange;
        }
        to {
            box-shadow: inset 0 0 14px 3px orange;
        }
    }

    @keyframes pulse-red {
        from {
            box-shadow: inset 0 0 0 3px #d20000;
        }
        to {
            box-shadow: inset 0 0 14px 3px #d20000;
        }
    }
</style>
