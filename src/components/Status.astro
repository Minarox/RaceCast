<p id="status" class="container red-border">
  Déconnecté
</p>

<script>
    import { State } from "../types/state.ts";

    const status: HTMLElement = document.getElementById("status") as HTMLElement;

    document.addEventListener("status", (event: any): void => {
        switch (event.detail) {
            case State.CONNECTING:
            case State.RECONNECTING:
                status.innerText = `${event.detail === "connecting" ? "Connection" : "Reconnection"} en cours...`;
                status.classList.remove("green-border", "red-border");
                status.classList.add("orange-border");
                break;
            case State.CONNECTED:
                status.innerText = "Connecté";
                status.classList.remove("red-border", "orange-border");
                status.classList.add("green-border");
                break;
            case State.DISCONNECTED:
                status.innerText = "Déconnecté";
                status.classList.remove("green-border", "orange-border");
                status.classList.add("red-border");
                break;
        }
    });
</script>

<style>
    p {
        z-index: 1000;
        position: absolute;
        top: 1rem;
        left: 1rem;
        font-size: 1.2em;
        font-weight: bold;
        text-align: center;
        padding: 0.8rem 2rem;
    }

    .green-border {
        box-shadow: inset 0 0 14px green;
    }

    .orange-border {
        animation: pulse-orange 2s linear infinite alternate;
    }

    .red-border {
        animation: pulse-red 2s linear infinite alternate;
    }

    @keyframes pulse-orange {
        from {
            box-shadow: inset 0 0 0 3px orange;
        }
        to {
            box-shadow: inset 0 0 14px 3px orange;
        }
    }

    @keyframes pulse-red {
        from {
            box-shadow: inset 0 0 0 3px #d20000;
        }
        to {
            box-shadow: inset 0 0 14px 3px #d20000;
        }
    }
</style>
