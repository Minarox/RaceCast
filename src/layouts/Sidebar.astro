---
import { Icon } from "astro-icon/components";
import Speed from "@components/Speed.astro";
---

<aside>
  <section>
    <button type="button" id="lock">
      <Icon name="material-symbols:lock-open-right-outline" />
      <Icon name="material-symbols:lock" />
    </button>
    <button type="button" id="open">
      <Icon name="material-symbols:arrow-back-ios-rounded" />
    </button>
    <Speed />
  </section>

  <section id="aside-components">
    <slot />
  </section>
</aside>

<script>
    const aside: HTMLElement = document.querySelector("aside") as HTMLElement;
    const openSvg: SVGElement = document.querySelector("#open svg") as SVGElement;
    const lockSvg: NodeListOf<HTMLElement> = document.querySelectorAll("#lock svg") as NodeListOf<HTMLElement>;
    const player: HTMLElement = document.getElementById("player-wrapper") as HTMLElement;
    const components: HTMLElement = document.getElementById("aside-components") as HTMLElement;
    let isLocked: boolean = false;

    window.addEventListener("resize", (): void => {
        if (window.innerWidth > 1200) {
            aside.style.right = isLocked ? "0" : "-400px";
            components.style.height = "100%";
        } else if (window.innerWidth > 768) {
            aside.style.right = isLocked ? "0" : "-300px";
            components.style.height = "100%";
        } else {
            aside.style.right = "0";
            if (player) {
                components.style.height = `calc(100dvh - ${player.offsetHeight}px)`;
            }
        }
    });

    document.getElementById("open")
        ?.addEventListener("click", (): void => {
            if (isLocked) return;
            openSvg.style.transform = openSvg.style.transform === "rotate(180deg)" ? "rotate(0deg)" : "rotate(180deg)";
            aside.style.right = aside.style.right === "0px" ? window.innerWidth > 1200 ? "-400px" : "-300px" : "0";
        });

    document.getElementById("lock")
        ?.addEventListener("click", (): void => {
            isLocked = !isLocked;
            aside.style.right = "0";
            openSvg.style.transform = "rotate(180deg)";
            lockSvg[0].style.display = isLocked ? "none" : "block";
            lockSvg[1].style.display = isLocked ? "block" : "none";

            const event: CustomEvent = new CustomEvent("sidebar", { detail: isLocked });
            document.dispatchEvent(event);
        });

    if (player && window.innerWidth <= 768) {
        components.style.height = `calc(100dvh - ${player.offsetHeight}px)`;
    }
</script>

<style>
    aside {
        pointer-events: none;
        position: absolute;
        top: 0;
        right: -400px;
        bottom: 0;
        display: grid;
        grid-template-columns: max-content 400px;
        grid-gap: 0.6rem;
        transition: right 0.3s ease-in-out;

        > section:first-child {
            margin: 1rem 0;
            display: grid;
            grid-template-rows: 50px 1fr 50px;
            justify-items: flex-end;
            grid-gap: 1rem;

            > button {
                pointer-events: auto;
                background-color: transparent;
                border: none;
                outline: none;
                cursor: pointer;
                font-size: 1.2rem;
                display: flex;
                align-items: center;
                justify-content: flex-end;
                padding-left: 1rem;

                &:first-of-type {
                    align-items: flex-start;

                    > svg:last-of-type {
                        display: none;
                    }
                }

                > svg {
                    height: 36px;
                    width: 36px;
                    color: white;
                }
            }

            > p {
                display: flex;
                align-items: flex-end;
                justify-content: flex-end;
            }

            #open > svg {
                transition: transform 180ms ease-in-out;
            }
        }

        > section:last-child {
            pointer-events: auto;
            margin: 1rem;
            display: flex;
            flex-direction: column;
            gap: 0.6rem;
            padding: 1rem;
            backdrop-filter: blur(6px);
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 8px;
            overflow-y: auto;
        }

        @media (max-width: 1200px) {
            right: -300px;
            grid-template-columns: max-content 300px;

            > section:first-child {
                > button {
                    font-size: 1rem;
                }
            }

            > section:last-child {
                padding: 0.6rem;
            }
        }

        @media (max-width: 768px) {
            position: unset;
            display: flex;
            flex-direction: column;
            transform: translateY(-44px);

            #lock,
            #open {
                display: none;
            }

            > section:first-child {
                margin: 0 0 0 0.4rem;
                display: flex;

                > p {
                    padding: 4px 12px;
                    font-size: 1.4em;
                    backdrop-filter: blur(6px);
                    background-color: rgba(0, 0, 0, 0.5);
                    border-radius: 8px;
                }
            }

            > section:last-child {
                width: 100vw;
                margin: 0;
                padding: 0.6rem;
                border-radius: 0;
                flex-flow: row wrap;
                align-content: flex-start;

                > * {
                    flex: 1 1 45%;

                    @media (max-width: 500px) {
                        flex: 1 1 100%;
                    }
                }
            }
        }
    }
</style>
